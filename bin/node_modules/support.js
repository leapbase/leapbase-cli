'use strict';
var debug = require('debug')('leaptool');
const { readdirSync, existsSync } = require('fs')
const { move, remove } = require('fs-extra');
const path = require('path');
const { promisify } = require('util');
const axios = require('axios');
const unzip = require('unzipper');

const githubUsername = 'leapbase';
const githubProjectName = 'leapbase';

exports.createProject = async function(projectName) {
  // console.log('in createProject - projectName:', projectName);
  if (existsSync(projectName)) {
    console.log(`folder ${projectName} exists`);
    return false;
  }
  let zipUrl = await exports.getLastestRelease(githubUsername, githubProjectName).catch(error => {
    console.log('Error in getting latest release url');
    return false;
  });
  // download release and unzip content
  let dest = '/tmp/unzipped_' + Math.floor(Math.random() * 10000000000);
  let downloadFolder = await exports.downloadUnzip(zipUrl, dest).catch(error => {
    console.log('Error in downloading latest release');
    return false;
  });
  // find leapbase subfolder
  let subFolders = await exports.getSubFolders(downloadFolder, 'leapbase');
  if (subFolders.length <= 0) {
    console.log('Error in locating leapbase folder in release zip file');
    return false;
  }
  // move lepabase subfolder to projectName folder
  let leapbaseFolder = `${downloadFolder}/${subFolders[0]}`
  console.log('leapbaseFolder:', leapbaseFolder);
  await move(leapbaseFolder, projectName).catch(error => {
    console.log('Error in move leapbase folder');
    return false;
  });
  // remove download folder
  await remove(downloadFolder);
  return true;
}

exports.getLastestRelease = async function(githubUsername, githubProjectName) {
  // console.log('in getLastestRelease:', githubUsername, githubProjectName);
  let zipUrl = '';
  var releaseUrl = `https://api.github.com/repos/${githubUsername}/${githubProjectName}/releases/latest`;
  try {
    const response = await axios.get(releaseUrl);
    zipUrl = response.data && response.data.zipball_url || '';
  } catch (error) {
    console.error(error);
  }
  return zipUrl;
}

exports.downloadUnzip = async function(url, dest) {
  // console.log('downloadUnzip - url:', url);
  // console.log('downloadUnzip to:', dest);
  const response = await axios({
    url: url,
    method: 'GET',
    responseType: 'stream'
  });
  const stream = response.data.pipe(unzip.Extract({ path:dest }));
  return new Promise((resolve, reject) => {
    stream.on('close', () => resolve(dest));
    stream.on('error', () => reject);
  });
}

// find subfolder starting with given prefix value
exports.getSubFolders = async function(path, prefix) {
  let folders = readdirSync(path, { withFileTypes: true })
    .filter(dirent => dirent.isDirectory())
    .map(dirent => dirent.name);
  if (prefix) {
    const regex = new RegExp('^' + prefix);
    folders = folders.filter(name => name.match(regex))
  }
  return folders
}
