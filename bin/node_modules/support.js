'use strict';
var debug = require('debug')('leaptool');
var util = require('util');
var fs = require('fs');
var path = require('path');
const axios = require('axios');
const unzip = require('unzip2');

exports.createProject = async function(projectName) {
  console.log('in createProject - projectName:', projectName);
  const githubUsername = 'leapbase';
  const githubProjectName = 'leapbase';
  let zipUrl = await exports.getLastestRelease(githubUsername, githubProjectName).catch(error => {
    console.log('Error in getting latest release url');
    return false;
  });
  // download release
  let dest = '/tmp/unzipped_' + Math.floor(Math.random() * 10000000000);
  let downloadResult = await exports.downloadUnzip(zipUrl, dest).catch(error => {
    console.log('Error in downloading latest release');
    return false;
  });
  console.log('>>> downloadResult:', downloadResult);
  
  return true;
}

exports.getLastestRelease = async function(githubUsername, githubProjectName) {
  console.log('in getLastestRelease:', githubUsername, githubProjectName);
  let zipUrl = '';
  var releaseUrl = `https://api.github.com/repos/${githubUsername}/${githubProjectName}/releases/latest`;
  try {
    const response = await axios.get(releaseUrl);
    zipUrl = response.data && response.data.zipball_url || '';
  } catch (error) {
    console.error(error);
  }
  return zipUrl;
}

exports.downloadUnzip = async function(url, dest) {
  console.log('downloadUnzip - url:', url);
  console.log('downloadUnzip to:', dest);
  const response = await axios({
    url: url,
    method: 'GET',
    responseType: 'stream'
  });
  const stream = response.data.pipe(unzip.Extract({ path:dest }));
  return new Promise((resolve, reject) => {
    stream.on('finish', () => resolve(dest));
    stream.on('error', () => reject);
  });
}

